#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <EEPROM.h>
#include "GravityTDS.h"


#define ONE_WIRE_BUS 8
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// For pH sensor 
#define PhSensorPin A3
float phCalibrationValue = 21.34;
int phBufferArr[10], phTemp;

//
bool cancel_pressed=false;
//TDS
#define TdsSensorPin A1
GravityTDS gravityTds;

float temperature = 25,tdsValue = 0;


#define PB_cancel 3  // Replace with the desired pin number
#define PB_OK 4      // Replace with the desired pin number
#define PB_UP 5      // Replace with the desired pin number
#define PB_DOWN 6  // Replace with the desired pin number

//
int entered_duration=0;

// Motor button
#define MOTOR_CONTROL_BUTTON  2

// Motor state
bool motorState = false; 

// Buzzer pin
#define BUZZER 12

// Motor control pin
#define MOTOR_PIN 7

// Range variables
int h_temp = 25;
int l_temp = 2;

//int ush=12;

float phMinValue = 6.5;
float phMaxValue = 8.0;

float tdsMinValue = 0;
float tdsMaxValue = 20;

int current_mode = 0, max_modes = 4; // Increased max_modes for additional sensor
String modes[] = {"1- Temp range", "2- pH range", "3- TDS range", "4- Motor Schedule"};

// Initialize the LCD with the I2C address 0x27
LiquidCrystal_I2C lcd(0x27, 20, 4);  // 20x4 LCD

bool should_ring_alarm = false;  // Flag to control alarm ringing

// Notes for the buzzer melody
int notes[] = {262, 294, 330, 349, 392, 440, 494};

// Number of notes in the melody
int n_notes = 7;

unsigned long previousMillis = 0;  // Stores the last time the time was updated
const long interval = 1000;        // Interval at which to update the time (milliseconds)

int hours = 0;
int minutes = 0;
int seconds = 0;

//for motor schedule
int motorStartHour = 0;
int motorStartMinute = 0;
int motorDurationMinutes = 0;
bool motorScheduled = false;

void setup() {
  Serial.begin(9600);
  lcd.init();              // Initialize the LCD
  lcd.backlight();          // Turn on the backlight
  lcd.setCursor(0, 0);      // Set the cursor to the first column, first row
  lcd.print("Hi");          // Print "Hi" on the LCD
  delay(2000);
  lcd.clear();
  print_line("welcome!", 0, 0);  // Assuming print_line is adjusted for LCD
  delay(2000);
  lcd.clear();
  sensors.begin();
  enter_time();

  pinMode(PB_cancel, INPUT);
  pinMode(PB_OK, INPUT);
  pinMode(PB_UP, INPUT);
  pinMode(PB_DOWN, INPUT);
  pinMode(MOTOR_PIN, OUTPUT);

  digitalWrite(MOTOR_PIN, LOW); // Ensure motor is off at start

  gravityTds.setPin(TdsSensorPin);
  gravityTds.setAref(5.0);  //reference voltage on ADC, default 5.0V on Arduino UNO
  gravityTds.setAdcRange(1024);  //1024 for 10bit ADC;4096 for 12bit ADC
  gravityTds.begin();  //initialization

  sensors.begin();

}
  void cancel_cancellation(){
    if(tdsValue < tdsMaxValue && tdsValue > tdsMinValue){
      cancel_pressed=false;
    }
  }

void loop() {
  Serial.println(digitalRead(PB_UP));
  if (digitalRead(PB_OK) == LOW) {
    delay(200);
    go_to_menu();
  }
  cancel_cancellation();
  update_time();
  // Check motor control button state
  if (digitalRead(MOTOR_CONTROL_BUTTON) == LOW) {
    delay(200); // Debounce delay
    motorState = !motorState; // Toggle motor state
    digitalWrite(MOTOR_PIN, motorState ? HIGH : LOW); // Turn motor on/off
  }
  if (motorScheduled && hours == motorStartHour && minutes == motorStartMinute && seconds == 0) {
    motorState = true;
    digitalWrite(MOTOR_PIN, HIGH); // Turn motor on
    print_line("Feeding time!",0,0);
    delay(motorDurationMinutes * 60000); // Keep the motor on for the specified duration
    motorState = false;
    digitalWrite(MOTOR_PIN, LOW); // Turn motor off
    motorScheduled = false; // Reset the schedule
    minutes=minutes+entered_duration;

  }
  check_tds_sensor();
  check_temp_sensor();
  

}

void print_line(String text, int col, int row) {
  lcd.setCursor(col, row);
  lcd.print(text);
}

int wait_for_button_press() {
  while (true) {
    if (digitalRead(PB_UP) == LOW) {
      return PB_UP;
    } else if (digitalRead(PB_DOWN) == LOW) {
      return PB_DOWN;
    } else if (digitalRead(PB_OK) == LOW) {
      return PB_OK;
    } else if (digitalRead(PB_cancel) == LOW) {
      return PB_cancel;
    }
  }
}

void go_to_menu() {
  while (digitalRead(PB_cancel) == HIGH) {
    lcd.clear();
    print_line(modes[current_mode], 0, 0);
    int pressed = wait_for_button_press();
    delay(1000);

    if (pressed == PB_UP) {
      delay(200);
      current_mode -= 1;
      if (current_mode < 0) {
        current_mode = max_modes - 1;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      current_mode += 1;
      current_mode = current_mode % max_modes;
    } else if (pressed == PB_OK) {
      delay(200);
      run_mode(current_mode);
    } else if (pressed == PB_cancel) {
      delay(200);
      break;
    }
  }
  lcd.clear();
}

// TDS range
void set_tds_range() {
  int entered_tds_min = 0;
  while (true) {
    lcd.clear();
    print_line("TDS Min: " + String(entered_tds_min), 0, 0);
    int pressed = wait_for_button_press();
    
    if (pressed == PB_UP) {
      delay(200);
      entered_tds_min += 1;
      if (entered_tds_min > 100) {
        entered_tds_min = 0;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_tds_min -= 1;
      if (entered_tds_min < 0) {
        entered_tds_min = 100;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      tdsMinValue = entered_tds_min;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      break;
    }
  }

  int entered_tds_max = 0;
  while (true) {
    lcd.clear();
    print_line("TDS Max: " + String(entered_tds_max), 0, 0);
    int pressed = wait_for_button_press();
    
    if (pressed == PB_UP) {
      delay(200);
      entered_tds_max += 1;
      if (entered_tds_max > 200) {
        entered_tds_max = 0;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_tds_max -= 1;
      if (entered_tds_max < 0) {
        entered_tds_max = 200;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      tdsMaxValue = entered_tds_max;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      break;
    }
  }
}

// Temp range
void set_temp_range() {
  int entered_h_temp = 27;
  while (true) {
    lcd.clear();
    print_line("high temp: " + String(entered_h_temp), 0, 0);
    int pressed = wait_for_button_press();
    
    if (pressed == PB_UP) {
      delay(200);
      entered_h_temp += 1;
      entered_h_temp = entered_h_temp % 31;
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_h_temp -= 1;
      if (entered_h_temp < 25) {
        entered_h_temp = 30;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      h_temp = entered_h_temp;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      break;
    }
  }

  int entered_l_temp = 27;
  while (true) {
    lcd.clear();
    print_line("lowest temp: " + String(entered_l_temp), 0, 0);
    int pressed = wait_for_button_press();
    
    if (pressed == PB_UP) {
      delay(200);
      entered_l_temp += 1;
      entered_l_temp = entered_l_temp % 31;
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_l_temp -= 1;
      if (entered_l_temp < 25) {
        entered_l_temp = 30;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      l_temp = entered_l_temp;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      break;
    }
  }
}

// PH range
void set_ph_range() {
  float entered_ph_min = 6.5;
  while (true) {
    lcd.clear();
    print_line("pH Min: " + String(entered_ph_min), 0, 0);
    int pressed = wait_for_button_press();
    
    if (pressed == PB_UP) {
      delay(200);
      entered_ph_min += 0.1;
      if (entered_ph_min > 14.0) {
        entered_ph_min = 6.5;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_ph_min -= 0.1;
      if (entered_ph_min < 0.0) {
        entered_ph_min = 0.0;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      phMinValue = entered_ph_min;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      break;
    }
  }

  float entered_ph_max = 8.0;
  while (true) {
    lcd.clear();
    print_line("pH Max: " + String(entered_ph_max), 0, 0);
    int pressed = wait_for_button_press();
    
    if (pressed == PB_UP) {
      delay(200);
      entered_ph_max += 0.1;
      if (entered_ph_max > 14.0) {
        entered_ph_max = 6.5;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_ph_max -= 0.1;
      if (entered_ph_max < 0.0) {
        entered_ph_max = 0.0;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      phMaxValue = entered_ph_max;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      break;
    }
  }
}

//set motor schedule
void set_motor_schedule() {
  int entered_hour = 0;
  int entered_minute = 0;
  entered_duration = 0;
  
  // Set motor start hour
  while (true) {
    lcd.clear();
    print_line("Set Hour: " + String(entered_hour), 0, 0);
    int pressed = wait_for_button_press();

    if (pressed == PB_UP) {
      delay(200);
      entered_hour++;
      if (entered_hour >= 24) {
        entered_hour = 0;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_hour--;
      if (entered_hour < 0) {
        entered_hour = 23;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      motorStartHour = entered_hour;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      return; // Exit without saving
    }
  }

  // Set motor start minute
  while (true) {
    lcd.clear();
    print_line("Set Minute: " + String(entered_minute), 0, 0);
    int pressed = wait_for_button_press();

    if (pressed == PB_UP) {
      delay(200);
      entered_minute++;
      if (entered_minute >= 60) {
        entered_minute = 0;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_minute--;
      if (entered_minute < 0) {
        entered_minute = 59;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      motorStartMinute = entered_minute;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      return; // Exit without saving
    }
  }

  // Set motor duration
  while (true) {
    lcd.clear();
    print_line("Duration (min): " + String(entered_duration), 0, 0);
    int pressed = wait_for_button_press();

    if (pressed == PB_UP) {
      delay(200);
      entered_duration++;
      if (entered_duration > 60) {
        entered_duration = 1;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_duration--;
      if (entered_duration < 1) {
        entered_duration = 1;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      motorDurationMinutes = entered_duration;
      motorScheduled = true;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      return; // Exit without saving
    }
  }
}


// Run Mode
void run_mode(int mode) {
  switch (mode) {
    case 0:
      set_temp_range();
      break;
    case 1:
      set_ph_range();
      break;
    case 2:
      set_tds_range();
      break;
    case 3:
      set_motor_schedule();
      break;
    default:
      lcd.clear();
      print_line("Invalid mode", 0, 0);
      delay(2000);
      lcd.clear();
      break;
  }
}

void update_time() {
  unsigned long currentMillis = millis();

  // Check if it's time to update the display
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;  // Save the last update time

    // Increment the seconds
    seconds++;
    
    // Check for overflow of seconds
    if (seconds >= 60) {
      seconds = 0;
      minutes++;  // Increment the minutes
    }
    
    // Check for overflow of minutes
    if (minutes >= 60) {
      minutes = 0;
      hours++;  // Increment the hours
    }
    
    // Check for overflow of hours
    if (hours >= 24) {
      hours = 0;
    }

    // Update the LCD with the new time
    lcd.setCursor(0, 0); // Set cursor to the 2nd row
    lcd.print("                "); // Clear the line
    lcd.setCursor(0, 0); // Set cursor to the 2nd row
    lcd.print("Time: ");
    if (hours < 10) lcd.print("0"); // Leading zero for hours
    lcd.print(hours);
    lcd.print(":");
    if (minutes < 10) lcd.print("0"); // Leading zero for minutes
    lcd.print(minutes);
    lcd.print(":");
    if (seconds < 10) lcd.print("0"); // Leading zero for seconds
    lcd.print(seconds);
  }
}

void enter_time(){
  int entered_h = 0;
  int entered_m = 0;
 // Set motor start hour
  while (true) {
    lcd.clear();
    print_line("Set Hour: " + String(entered_h), 0, 0);
    int pressed = wait_for_button_press();

    if (pressed == PB_UP) {
      delay(200);
      entered_h++;
      if (entered_h >= 24) {
        entered_h = 0;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_h--;
      if (entered_h < 0) {
        entered_h = 23;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      hours = entered_h;
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      return; // Exit without saving
    }
  }

  // Set motor start minute
  while (true) {
    lcd.clear();
    print_line("Set Minute: " + String(entered_m), 0, 0);
    int pressed = wait_for_button_press();

    if (pressed == PB_UP) {
      delay(200);
      entered_m++;
      if (entered_m >= 60) {
        entered_m = 0;
      }
    } else if (pressed == PB_DOWN) {
      delay(200);
      entered_m--;
      if (entered_m < 0) {
        entered_m = 59;
      }
    } else if (pressed == PB_OK) {
      delay(200);
      minutes = entered_m;
      lcd.clear();
      break;
    } else if (pressed == PB_cancel) {
      delay(200);
      return; // Exit without saving
    }
  }

  }

void check_tds_sensor() {
    gravityTds.setTemperature(temperature);  // set the temperature and execute temperature compensation
    gravityTds.update();  //sample and calculate 
    tdsValue = gravityTds.getTdsValue();  // then get the value
    Serial.print(tdsValue,0);
    Serial.println("ppm");
    //delay(1000);  
    print_line("TDS: "+ String(tdsValue), 0, 2);
    delay(1000);


if(!cancel_pressed){
    if (tdsValue > tdsMaxValue ) {

      //lcd.clear();
        lcd.clear();
    bool break_happened = false;
      while (!break_happened && digitalRead(PB_cancel) == HIGH) {

        print_line("TDS high!"+String(tdsValue),0,0);

        if (digitalRead(PB_cancel) == LOW) {
            delay(200);
            //should_ring_alarm = false; // Set flag to false
            break_happened = true;
            cancel_pressed=true;
            lcd.clear();
            break;

          }

        }    

    }
    }

    if (tdsValue < tdsMinValue ) {

      //lcd.clear();
        lcd.clear();
    bool break_happened = false;
      while (!break_happened && digitalRead(PB_cancel) == HIGH) {

        print_line("TDS low!"+String(tdsValue),0,0);

        if (digitalRead(PB_cancel) == LOW) {
            delay(200);
            //should_ring_alarm = false; // Set flag to false
            break_happened = true;
            cancel_pressed=true;
            lcd.clear();
            break;

          }
        }    
    }}

void check_temp_sensor(){
  sensors.requestTemperatures();
  float temperatureC = sensors.getTempCByIndex(0);
    print_line("Temp: "+ String(temperatureC ), 0, 1);
    delay(1000);

  if(!cancel_pressed){
      if (temperatureC > h_temp ) {

        //lcd.clear();
          lcd.clear();
      bool break_happened = false;
        while (!break_happened && digitalRead(PB_cancel) == HIGH) {

          print_line("Tempreature high!"+String(h_temp),0,0);

          if (digitalRead(PB_cancel) == LOW) {
              delay(200);
              //should_ring_alarm = false; // Set flag to false
              break_happened = true;
              cancel_pressed=true;
              lcd.clear();
              break;

            }

          }    

      }
      }

      if ( temperatureC< l_temp ) {

        //lcd.clear();
          lcd.clear();
      bool break_happened = false;
        while (!break_happened && digitalRead(PB_cancel) == HIGH) {

          print_line("Tempreature low!"+String(l_temp),0,0);

          if (digitalRead(PB_cancel) == LOW) {
              delay(200);
              //should_ring_alarm = false; // Set flag to false
              break_happened = true;
              cancel_pressed=true;
              lcd.clear();
              break;

            }

          }    

      }}

void check_ph_sensor(){
  
  float phValue = analogRead(PhSensorPin);
  phValue = (float)phValue * 5.0 / 1024.0;
  phValue = 3.5 * phValue + phCalibrationValue;

  if(!cancel_pressed){
      if (phValue > phMaxValue ) {

        //lcd.clear();
          lcd.clear();
      bool break_happened = false;
        while (!break_happened && digitalRead(PB_cancel) == HIGH) {

          print_line("Ph high!"+String(phMaxValue),0,0);

          if (digitalRead(PB_cancel) == LOW) {
              delay(200);
              //should_ring_alarm = false; // Set flag to false
              break_happened = true;
              cancel_pressed=true;
              lcd.clear();
              break;

            }

          }    

      }
      }

      if ( phValue< phMinValue ) {

        //lcd.clear();
          lcd.clear();
      bool break_happened = false;
        while (!break_happened && digitalRead(PB_cancel) == HIGH) {

          print_line("Ph low!"+String(phValue),0,0);

          if (digitalRead(PB_cancel) == LOW) {
              delay(200);
              //should_ring_alarm = false; // Set flag to false
              break_happened = true;
              cancel_pressed=true;
              lcd.clear();
              break;

            }

          }    

      }}


void ring_alarm() {
  bool break_happened = false;
  while (!break_happened && digitalRead(PB_cancel) == HIGH) {
    for (int i = 0; i < n_notes; i++) {
      if (digitalRead(PB_cancel) == LOW) {
        delay(200);
        //should_ring_alarm = false; // Set flag to false
        break_happened = true;
        noTone(BUZZER); // Turn off the buzzer
        
        break;

      }
      tone(BUZZER, notes[i]);
      delay(500);
      noTone(BUZZER);
      delay(2);
}
}}
